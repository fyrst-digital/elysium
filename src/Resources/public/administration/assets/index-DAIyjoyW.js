const t = `<div class="elysium-slide-selection-item" ref="selectItem" v-draggable="{ {# dataGroup: 'slide-selection', #} data: { draggedItemIndex: index, }, delay: 200, onDragStart: dragStart, onDragEnter: dragEnter, {# validateDrag: validateDrag, #} {# validateDrop: validateDrop, #} {# onDragLeave: dragLeave, #} validateDrop: validateDrop, onDrop: dropSlide, }" v-droppable="{ data: { index: index, }, validateDrop: validateDrop, {# onDrop: dropSlide, #} }" > <div v-if="draggedSlide"> {{draggedSlide}} </div> <div class="elysium-slide-selection-item-headerbar"> <div class="elysium-slide-selection-item-dragger" title="Drag slide" > <blur-icon name="blurph-dots-three-bold" :size="14" /> </div> <div class="elysium-slide-selection-item-slidename" v-html="slideName" /> <div class="elysium-slide-selection-item-actions"> <div class="elysium-slide-selection-item-action" @click="positionUp" > <blur-icon name="blurph-caret-up" :size="14" /> </div> <div class="elysium-slide-selection-item-action" @click="positionDown" > <blur-icon name="blurph-caret-down" :size="14" /> </div> <div class="elysium-slide-selection-item-action" @click="editSlide" > <blur-icon name="blurph-pencil-simple-line" :size="14" /> </div> <div class="elysium-slide-selection-item-action" @click="removeSlide" > <blur-icon name="blurph-trash" :size="14" /> </div> </div> </div> <div class="elysium-slide-selection-item-content"> <div class="elysium-slide-selection-item-title" v-html="slideTitle" /> </div> </div>`, { Component: d, Data: s, Context: a } = Shopware, { Criteria: r } = s, n = d.wrapComponentConfig({ template: t, props: { slide: { type: Object, required: !0 }, index: { type: Number, required: !0 } }, computed: { slideName() { var i, e; return ((e = (i = this.slide) == null ? void 0 : i.translated) == null ? void 0 : e.name) ?? "Loading..." }, slideTitle() { var i, e; return ((e = (i = this.slide) == null ? void 0 : i.translated) == null ? void 0 : e.title) ?? this.$tc("blurElysium.general.noHeadline") } }, methods: { positionUp() { this.$emit("position-up", this.slide) }, positionDown() { this.$emit("position-down", this.slide) }, editSlide() { this.$emit("edit-slide", this.slide) }, removeSlide() { this.$emit("remove-slide", this.slide) }, dragStart(i) { this.$emit("drag-slide-start", this.slide, i) }, dragEnter(i, e, l) { }, dragLeave(i, e, l) { }, validateDrop(i, e) { let l = !1; return typeof (e == null ? void 0 : e.index) == "number" && i.draggedItemIndex !== (e == null ? void 0 : e.index) && (l = !0), l }, dropSlide(i, e) { this.$emit("drag-slide-drop", i, e) } } }); export { n as default };
//# sourceMappingURL=index-DAIyjoyW.js.map
